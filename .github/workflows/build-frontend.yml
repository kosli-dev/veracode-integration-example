name: Build Frontend

on:
  push:
#    paths: ["apps/frontend/**"]
    branches-ignore:
      - 'refs/tags/*' # In this demo we use tags to simulate what SW is running, so ignore

env:
  # kosli commands picks up org, flow, trail and api-token from these environment variables
  KOSLI_ORG: "${{ vars.KOSLI_ORG }}"
  KOSLI_FLOW: veracode-example-frontend
  KOSLI_TRAIL: ${{ github.sha }}
  KOSLI_API_TOKEN: "${{ secrets.KOSLI_PUBLIC_API_TOKEN }}"
  KOSLI_CLI_VERSION: "${{ vars.KOSLI_CLI_VERSION }}"
  KOSLI_TEMPLATE_FILE: "kosli-flow-templates/frontend-template.yml"
  # KOSLI_DRY_RUN: true
  JIRA_BASE_URL: "${{ vars.JIRA_BASE_URL }}"
  JIRA_USERNAME: ${{ secrets.KOSLI_JIRA_USERNAME }}
  JIRA_API_TOKEN: ${{ secrets.KOSLI_JIRA_API_TOKEN }}

jobs:
  begin-trail:
    name: Begin trail
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Begin trail
        if: ${{ github.ref == 'refs/heads/main' }}
        uses: ./.github/actions/kosli-begin-trail
        with:
          kosli-trail: ${{ env.KOSLI_TRAIL }}
          kosli-template-file: ${{ env.KOSLI_TEMPLATE_FILE }}

  pull-request:
    name: Pull-request
    if: ${{ github.ref == 'refs/heads/main' }}
    needs: [begin-trail]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Attest GitHub pull-request
        uses: ./.github/actions/kosli-attest-pullrequest
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          assert: true

  build:
    name: Build frontend
    needs: [begin-trail]
    runs-on: ubuntu-latest
    outputs:
      fingerprint: ${{ steps.calculate_fingerprint.outputs.fingerprint }}
    steps:
      - uses: actions/checkout@v4

      - name: Build frontend
        run: echo "Here we could do some proper build"

      - name: Extract short SHA
        run: echo "SHORT_SHA=${GITHUB_SHA:0:7}" >> $GITHUB_ENV

      - name: Attest artifact
        id: calculate_fingerprint
        if: ${{ github.ref == 'refs/heads/main' }}
        uses: ./.github/actions/kosli-attest-dir-artifact
        with:
          kosli-artifact-template-name: frontend
          artifact-name: frontend:${{ env.SHORT_SHA }}
          artifact-dir: apps/frontend

  veracode-scan:
    name: Veracode scan
    needs: [begin-trail, build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Run veracode scan
        # We have not set up veracode, we just use some saved result files
        run: cp testfiles/veracode-scan-errors-1.json static-scan-frontend.json

      - name: Attest veracode executed
        if: ${{ github.ref == 'refs/heads/main' }}
        uses: ./.github/actions/kosli-attest-veracode-executed
        with:
          kosli-attestation-template-name: security-scan-executed
          artifact-fingerprint: ${{ needs.build.outputs.fingerprint }}
          veracode-scan-results-file: static-scan-frontend.json

      - name: Attest veracode vulnerability summary
        if: ${{ github.ref == 'refs/heads/main' }}
        uses: ./.github/actions/kosli-attest-veracode-vulnerability-summary
        with:
          kosli-flow: veracode-example-veracode
          kosli-trail-base-name: frontend
          kosli-attestation-template-name: security-scan-vulnerability-summary
          veracode-scan-results-file: static-scan-frontend.json

  assert-artifacts:
    name: Assert artifacts
    if: ${{ github.ref == 'refs/heads/main' && always() }}
    needs: [build, veracode-scan, pull-request]
    runs-on: ubuntu-latest
    steps:
      - name: Setup Kosli cli
        uses: kosli-dev/setup-cli-action@v2
        with:
          version:
            ${{ vars.KOSLI_CLI_VERSION }}

      - name: Assert Artifacts
        run: |
          set -x
          EXIT_CODE=0
          kosli assert artifact --fingerprint ${{ needs.build.outputs.fingerprint }} || EXIT_CODE=1
          exit ${EXIT_CODE}
          
  deploy-dev:
    name: Deploy frontend development
    if: ${{ github.ref == 'refs/heads/main' }}
    needs: [build, assert-artifacts]
    environment: Development
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to development
        run: echo "Here we could do a proper deploy to Development environment"
